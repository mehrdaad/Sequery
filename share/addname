#!/bin/csh
#
#
# This script takes the output of sequery and adds names to the pdb codes found in
# the first column. It looks for the TITLE or COMPND field in the pdb file and
# dumps the 1st line from that file. Sometimes the names are not fully provided in
# the 1st TITLE or COMPND field. The script fails in giving the exact name for these
# cases
#
# The algorithm is to read a line from the command line filename, converts all white
# spaces to %, finds the PDB code, finds the file for that pdbcode in $PDBHOME, extracts
# the first line of TITLE/COMPND line the file and dumps out the name. The % are converted
# back to white spaces. This translation of whitespace-% was to preserve the formatted 
# output of sequery
#
# Lines starting with # are ignored
# PDB files not found in $PDBHOME are reported
#
# number of columns at the output can specified. Default is 80
#
# - Vishal Thakkar
#   Dec 18, 1997, Kuhn Lab, Biochemistry, Michigan State University.
#
# LK note on usage: addname sequeryfile > outfile 

# ***** CHANGE THIS LINE TO POINT TO YOUR LOCATION OF THE PDB *****
set PDBHOME = "/psa/pdb"
# *****************************************************************

if (${#argv} == 0 ) then
  echo " Adds name to the pdb codes generated by sequery"
  echo " Usage: $0 sequery_output_file [columns]"
  echo "                   sequery_output_file : file generated by sequery"
  echo "                   columns : nos of columns at the output (default 80)"
  echo " Output truncated to 80 chars per line"
  exit
endif
  
set cols=80

if (${#argv} == 2) then
  set cols = ${argv[2]}
endif

foreach l ("`cat  $1|tr ' ' '%'`")
 
 set comment = "0"
 set comment = `echo $l|awk '$0~/^#/{print 1}'`
 if ("${comment}" == "1") then
   echo $l|tr '%' ' '|cut -b1-${cols}
   continue
 endif
 
 set pdb=`echo $l |awk -F% '{print $1}'`
 if ( -e $PDBHOME/pdb${pdb}.ent) then
 (echo -n $l|tr '%' ' ';head $PDBHOME/pdb${pdb}.ent| awk 'BEGIN {done=0}\
                (/^TITLE/ || /^COMPND/) && done==0   {       \
                 if ($1 == "TITLE" ) {                       \
                         done =1                             \
                         $1 = ""                             \
                         print " "$0                         \
                 } else  {                                   \
                         done = 1                            \
                         $1 = ""                             \
                         print " "$0                         \
                 }                                           \
          } ')|cut -b1-${cols}
 else
   echo "  ###### not in database ########"
 endif
end


